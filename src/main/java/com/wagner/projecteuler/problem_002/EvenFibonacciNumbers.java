package com.wagner.projecteuler.problem_002;

import com.wagner.shared.util.AlgorithmUtil;

import java.util.function.UnaryOperator;
import java.util.stream.Stream;

class EvenFibonacciNumbers {

  /*
   * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
   * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
   * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
   */

  static long sumEvenFibonaccis(long upperLimit) {
    int lastFibonacciValue        = 1;
    int currentFibonacciValue     = 2;
    int sum                       = 2; // 2 is the first even fibonacci value
    int nextFibonacciValue;

    while (currentFibonacciValue < upperLimit) {
      nextFibonacciValue    = lastFibonacciValue + currentFibonacciValue;
      lastFibonacciValue    = currentFibonacciValue;
      currentFibonacciValue = nextFibonacciValue;

      if (AlgorithmUtil.isEven(currentFibonacciValue)) {
        sum += currentFibonacciValue;
      }
    }

    return sum;
  }

  public void test_sum_of_even_fibonacci_numbers_with_stream() {
    UnaryOperator<long[]> iterationOperation = (f)-> new long[] {f[0]+f[1], f[0]};
    Stream.iterate(new long[] {1,0}, iterationOperation)
          .mapToLong(f -> f[0])
          .limit(20)
          .forEach(System.out::println);
  }

}